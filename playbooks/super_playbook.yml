# Este es mi fichero de playbook
--- # Crear nuevo play
# Contra quien opero
- hosts: ubuntu02

  # Opciones de conexión
  remote_user: root
  order: inventory # reverse_inventory | sorted | reverse_sorted | shuffle
  # Ansible va ejectando las tasks de manera secuencial pero en paralelo sobre diferentes entornos
  # Por defecto lo hace de 5 en 5
 
  # Variables TODO
  vars:
        variable1: Hola amigo!!
        variable2: 22
        variable3:
            subvalor1: 1
            subvalor2: 2
 
  # Comienza la deficnición de tareas
  tasks:
    
    # Comienza la primera tarea
    - name: Mi primera tarea
      debug: 
        # Si quiero usar variable, usar doble llave para introducir la variable y todo el texto tiene que ir entrecomillado
        msg: "{{ variable1 }} Voy a comenzar una tarea"
    
    # Comienza la segunda tarea
    - name: Mi segunda tarea
      debug: 
        # !unsafe evita que un texto se procese por JINJA
        msg: !unsafe "En ninja va todo con dobles llaves {{ aqui va mi variable }}"
        
    # Comienza la tercera tarea
    - name: Mi tercera tarea
      debug: 
        msg: "{{ variable1 }} Voy a comenzar la tarea {{ numerotarea }}, en el servidor {{sistema}} {{sistema2}}"
      # Puedo definir variables a nivel de tarea
      vars:
            numerotarea: 3

    # Comienza la cuarte tarea
    - name: Mi cuarta tarea
      debug: 
        msg: "Valores del diccionario {{ variable3.subvalor2}}"

    # Comienza una tarea para acceder los facts
    - name: Mi tarea de facts
      debug: 
        #msg: "Valores del diccionario {{ variable3.subvalor2}}" 
        var: ansible_facts.dns.nameservers[0]
        
    # Mi primera tarea CONDICIONAL
    - name: Mi primera tarea condicional
      debug: 
        msg: "He entrado!!!!" 
      when: 
        - ansible_facts.distribution == 'Ubuntu' 
        - variable2 == 22
        
    # Una tarea normalita
    - name: Mi tarea normalita
      debug: 
        msg: "Me ejecuto normalmente"
      changed_when: False
      notify: tarea opcional 1
      
    # Una tarea normalita 2
    - name: Mi tarea normalita 2
      debug: 
        msg: "Me ejecuto normalmente"
      changed_when: True
      notify: mievento

    # Una tarea que explota
    - name: Mi tarea explosiva
      shell: 
        cmd: umane
      ignore_errors: True
      failed_when: explosiva.rc > 100
      register: explosiva
        
    - name: otra tarea
      debug: 
        msg: "{{ explosiva.stdout }}"
      when: explosiva.rc == 0
        
    - name: Una tarea que comprueba un texto
      debug: 
        msg: La salida de error de la tarea explosiva contiene 'not found'
      #when:  "'found' not in explosiva.stderr"
      #when: explosiva.stderr is match(".*not.*")
      when: "'Este es mi texto' is search('Este .* texto')"
      # Regex:
      #^ Comienzo del texto
      #$ Final del texto
      #when: explosiva.stderr is search("n.t f..nd")
      
    # Primera tarea en bucle!
    - name: Primer bucle
      debug: 
        msg: "Ahora voy a hacer algo con el puerto: {{item}}"
      loop: "{{ puertos }}"
      vars: 
        puertos:
            - 80
            - 81
            - 83
            
    # Ejercicio bucle!
    - name: Ejercicio bucle
      debug: 
        msg: "Veamos las CPUs: {{ item | upper }}"
      loop: "{{ansible_facts.processor}}"
      loop_control:
        index_var: cpus
      when: (cpus+1) % 3 == 0
      #when: ansible_loop.index % 3 == 0 | Solo funciona en ansible 2.7 -> tenemos ansible 2.5
      
      
    - name: Ejercicio bucle
      debug: 
        msg: "Hola que ase"
      tags:
        - instalaciones
        - preparacion
        
  # ansible-playbook mificheroplaybook -i  mificheroinventario --tags "instalaciones, configuraciones"
      
    - name: Varias tareas a ejecutar de golpe
      block: 
        - name: primera del bloque
          debug: 
            msg: "Hola que ase"
        - name: segunda del bloque
          debug: 
            msg: "y usté, que ase"
      rescue: 
        - name: tarea de rescate, en caso de error de las tareas del bloque
          debug: 
            msg: "y usté, que ase"
      always: 
        - name: Tarea que se va a ajecutar después del bloque y/o después del rescue
          debug: 
            msg: "y usté, que ase"
            

  handlers:      
    # Una tarea opcional
    - name: tarea opcional 1
      debug: 
        msg: "Me ejecuto opcionalmente 1"
      listen: mievento
        
    # Una tarea opcional 2
    - name: tarea opcional 2
      debug: 
        msg: "Me ejecuto opcionalmente 2"
      listen: mievento